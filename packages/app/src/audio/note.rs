use std::ops::Add;
use std::ops::Sub;

#[derive(Clone, Copy)]
pub enum Note {
    C0,
    C0Sharp,
    D0,
    D0Sharp,
    E0,
    F0,
    F0Sharp,
    G0,
    G0Sharp,
    A0,
    A0Sharp,
    B0,
    C1,
    C1Sharp,
    D1,
    D1Sharp,
    E1,
    F1,
    F1Sharp,
    G1,
    G1Sharp,
    A1,
    A1Sharp,
    B1,
    C2,
    C2Sharp,
    D2,
    D2Sharp,
    E2,
    F2,
    F2Sharp,
    G2,
    G2Sharp,
    A2,
    A2Sharp,
    B2,
    C3,
    C3Sharp,
    D3,
    D3Sharp,
    E3,
    F3,
    F3Sharp,
    G3,
    G3Sharp,
    A3,
    A3Sharp,
    B3,
    C4,
    C4Sharp,
    D4,
    D4Sharp,
    E4,
    F4,
    F4Sharp,
    G4,
    G4Sharp,
    A4,
    A4Sharp,
    B4,
    C5,
    C5Sharp,
    D5,
    D5Sharp,
    E5,
    F5,
    F5Sharp,
    G5,
    G5Sharp,
    A5,
    A5Sharp,
    B5,
    C6,
    C6Sharp,
    D6,
    D6Sharp,
    E6,
    F6,
    F6Sharp,
    G6,
    G6Sharp,
    A6,
    A6Sharp,
    B6,
    C7,
    C7Sharp,
    D7,
    D7Sharp,
    E7,
    F7,
    F7Sharp,
    G7,
    G7Sharp,
    A7,
    A7Sharp,
    B7,
    C8,
    C8Sharp,
    D8,
    D8Sharp,
    E8,
    F8,
    F8Sharp,
    G8,
    G8Sharp,
    A8,
    A8Sharp,
    B8,
}

// implement add for Note
impl Add<Note> for Note {
    type Output = Note;

    fn add(self, rhs: Note) -> Self::Output {
        let note = self as u8 + rhs as u8;
        if note > Note::B8 as u8 {
            Note::B8
        } else {
            unsafe { std::mem::transmute(note) }
        }
    }
}

// implement subtract for Note
impl Sub<Note> for Note {
    type Output = Note;

    fn sub(self, rhs: Note) -> Self::Output {
        let note = self as u8 - rhs as u8;
        if note < Note::C0 as u8 {
            Note::C0
        } else {
            unsafe { std::mem::transmute(note) }
        }
    }
}

// implement Rem for Note
impl std::ops::Rem<Note> for Note {
    type Output = Note;

    fn rem(self, rhs: Note) -> Self::Output {
        let note = self as u8 % rhs as u8;
        unsafe { std::mem::transmute(note) }
    }
}

impl ToString for Note {
    fn to_string(&self) -> String {
        let string = match self {
            Note::C0 => "C0",
            Note::C0Sharp => "C0#",
            Note::D0 => "D0",
            Note::D0Sharp => "D0#",
            Note::E0 => "E0",
            Note::F0 => "F0",
            Note::F0Sharp => "F0#",
            Note::G0 => "G0",
            Note::G0Sharp => "G0#",
            Note::A0 => "A0",
            Note::A0Sharp => "A0#",
            Note::B0 => "B0",
            Note::C1 => "C1",
            Note::C1Sharp => "C1#",
            Note::D1 => "D1",
            Note::D1Sharp => "D1#",
            Note::E1 => "E1",
            Note::F1 => "F1",
            Note::F1Sharp => "F1#",
            Note::G1 => "G1",
            Note::G1Sharp => "G1#",
            Note::A1 => "A1",
            Note::A1Sharp => "A1#",
            Note::B1 => "B1",
            Note::C2 => "C2",
            Note::C2Sharp => "C2#",
            Note::D2 => "D2",
            Note::D2Sharp => "D2#",
            Note::E2 => "E2",
            Note::F2 => "F2",
            Note::F2Sharp => "F2#",
            Note::G2 => "G2",
            Note::G2Sharp => "G2#",
            Note::A2 => "A2",
            Note::A2Sharp => "A2#",
            Note::B2 => "B2",
            Note::C3 => "C3",
            Note::C3Sharp => "C3#",
            Note::D3 => "D3",
            Note::D3Sharp => "D3#",
            Note::E3 => "E3",
            Note::F3 => "F3",
            Note::F3Sharp => "F3#",
            Note::G3 => "G3",
            Note::G3Sharp => "G3#",
            Note::A3 => "A3",
            Note::A3Sharp => "A3#",
            Note::B3 => "B3",
            Note::C4 => "C4",
            Note::C4Sharp => "C4#",
            Note::D4 => "D4",
            Note::D4Sharp => "D4#",
            Note::E4 => "E4",
            Note::F4 => "F4",
            Note::F4Sharp => "F4#",
            Note::G4 => "G4",
            Note::G4Sharp => "G4#",
            Note::A4 => "A4",
            Note::A4Sharp => "A4#",
            Note::B4 => "B4",
            Note::C5 => "C5",
            Note::C5Sharp => "C5#",
            Note::D5 => "D5",
            Note::D5Sharp => "D5#",
            Note::E5 => "E5",
            Note::F5 => "F5",
            Note::F5Sharp => "F5#",
            Note::G5 => "G5",
            Note::G5Sharp => "G5#",
            Note::A5 => "A5",
            Note::A5Sharp => "A5#",
            Note::B5 => "B5",
            Note::C6 => "C6",
            Note::C6Sharp => "C6#",
            Note::D6 => "D6",
            Note::D6Sharp => "D6#",
            Note::E6 => "E6",
            Note::F6 => "F6",
            Note::F6Sharp => "F6#",
            Note::G6 => "G6",
            Note::G6Sharp => "G6#",
            Note::A6 => "A6",
            Note::A6Sharp => "A6#",
            Note::B6 => "B6",
            Note::C7 => "C7",
            Note::C7Sharp => "C7#",
            Note::D7 => "D7",
            Note::D7Sharp => "D7#",
            Note::E7 => "E7",
            Note::F7 => "F7",
            Note::F7Sharp => "F7#",
            Note::G7 => "G7",
            Note::G7Sharp => "G7#",
            Note::A7 => "A7",
            Note::A7Sharp => "A7#",
            Note::B7 => "B7",
            Note::C8 => "C8",
            Note::C8Sharp => "C8#",
            Note::D8 => "D8",
            Note::D8Sharp => "D8#",
            Note::E8 => "E8",
            Note::F8 => "F8",
            Note::F8Sharp => "F8#",
            Note::G8 => "G8",
            Note::G8Sharp => "G8#",
            Note::A8 => "A8",
            Note::A8Sharp => "A8#",
            Note::B8 => "B8",
        };
        string.to_string()
    }
}

pub static NOTES: [Note; 108] = [
    Note::C0,
    Note::C0Sharp,
    Note::D0,
    Note::D0Sharp,
    Note::E0,
    Note::F0,
    Note::F0Sharp,
    Note::G0,
    Note::G0Sharp,
    Note::A0,
    Note::A0Sharp,
    Note::B0,

    Note::C1,
    Note::C1Sharp,
    Note::D1,
    Note::D1Sharp,
    Note::E1,
    Note::F1,
    Note::F1Sharp,
    Note::G1,
    Note::G1Sharp,
    Note::A1,
    Note::A1Sharp,
    Note::B1,

    Note::C2,
    Note::C2Sharp,
    Note::D2,
    Note::D2Sharp,
    Note::E2,
    Note::F2,
    Note::F2Sharp,
    Note::G2,
    Note::G2Sharp,
    Note::A2,
    Note::A2Sharp,
    Note::B2,

    Note::C3,
    Note::C3Sharp,
    Note::D3,
    Note::D3Sharp,
    Note::E3,
    Note::F3,
    Note::F3Sharp,
    Note::G3,
    Note::G3Sharp,
    Note::A3,
    Note::A3Sharp,
    Note::B3,

    Note::C4,
    Note::C4Sharp,
    Note::D4,
    Note::D4Sharp,
    Note::E4,
    Note::F4,
    Note::F4Sharp,
    Note::G4,
    Note::G4Sharp,
    Note::A4,
    Note::A4Sharp,
    Note::B4,

    Note::C5,
    Note::C5Sharp,
    Note::D5,
    Note::D5Sharp,
    Note::E5,
    Note::F5,
    Note::F5Sharp,
    Note::G5,
    Note::G5Sharp,
    Note::A5,
    Note::A5Sharp,
    Note::B5,
    Note::C6,
    Note::C6Sharp,
    Note::D6,
    Note::D6Sharp,
    Note::E6,
    Note::F6,
    Note::F6Sharp,
    Note::G6,
    Note::G6Sharp,
    Note::A6,
    Note::A6Sharp,
    Note::B6,
    Note::C7,
    Note::C7Sharp,
    Note::D7,
    Note::D7Sharp,
    Note::E7,
    Note::F7,
    Note::F7Sharp,
    Note::G7,
    Note::G7Sharp,
    Note::A7,
    Note::A7Sharp,
    Note::B7,
    Note::C8,
    Note::C8Sharp,
    Note::D8,
    Note::D8Sharp,
    Note::E8,
    Note::F8,
    Note::F8Sharp,
    Note::G8,
    Note::G8Sharp,
    Note::A8,
    Note::A8Sharp,
    Note::B8,
];

pub static FREQUENCIES: [f32; 108] = [
    16.35, 17.32, 18.35, 19.45, 20.60, 21.83, 23.12, 24.50, 25.96, 27.50, 29.14, 30.87, 32.70,
    34.65, 36.71, 38.89, 41.20, 43.65, 46.25, 49.00, 51.91, 55.00, 58.27, 61.74, 65.41, 69.30,
    73.42, 77.78, 82.41, 87.31, 92.50, 98.00, 103.83, 110.00, 116.54, 123.47, 130.81, 138.59,
    146.83, 155.56, 164.81, 174.61, 185.00, 196.00, 207.65, 220.00, 233.08, 246.94, 261.63, 277.18,
    293.66, 311.13, 329.63, 349.23, 369.99, 392.00, 415.30, 440.00, 466.16, 493.88, 523.25, 554.37,
    587.33, 622.25, 659.25, 698.46, 739.99, 783.99, 830.61, 880.00, 932.33, 987.77, 1046.50,
    1108.73, 1174.66, 1244.51, 1318.51, 1396.91, 1479.98, 1567.98, 1661.22, 1760.00, 1864.66,
    1975.53, 2093.00, 2217.46, 2349.32, 2489.02, 2637.02, 2793.83, 2959.96, 3135.96, 3322.44,
    3520.00, 3729.31, 3951.07, 4186.01, 4434.92, 4698.63, 4978.03, 5274.04, 5587.65, 5919.91,
    6271.93, 6644.88, 7040.00, 7458.62, 7902.13,
];

// CMajor scale
pub static CMAJOR_SCALE: [Note; 63] = [
    Note::C0,
    Note::D0,
    Note::E0,
    Note::F0,
    Note::G0,
    Note::A0,
    Note::B0,

    Note::C1,
    Note::D1,
    Note::E1,
    Note::F1,
    Note::G1,
    Note::A1,
    Note::B1,

    Note::C2,
    Note::D2,
    Note::E2,
    Note::F2,
    Note::G2,
    Note::A2,
    Note::B2,

    Note::C3,
    Note::D3,
    Note::E3,
    Note::F3,
    Note::G3,
    Note::A3,
    Note::B3,

    Note::C4,
    Note::D4,
    Note::E4,
    Note::F4,
    Note::G4,
    Note::A4,
    Note::B4,

    Note::C5,
    Note::D5,
    Note::E5,
    Note::F5,
    Note::G5,
    Note::A5,
    Note::B5,

    Note::C6,
    Note::D6,
    Note::E6,
    Note::F6,
    Note::G6,
    Note::A6,
    Note::B6,

    Note::C7,
    Note::D7,
    Note::E7,
    Note::F7,
    Note::G7,
    Note::A7,
    Note::B7,

    Note::C8,
    Note::D8,
    Note::E8,
    Note::F8,
    Note::G8,
    Note::A8,
    Note::B8,
];

// pub fn frequency_to_note(frequency: f32) -> Note {
//     match frequency {
//         16.35 => Note::C0,
//         17.32 => Note::C0Sharp,
//         18.35 => Note::D0,
//         19.45 => Note::D0Sharp,
//         20.60 => Note::E0,
//         21.83 => Note::F0,
//         23.12 => Note::F0Sharp,
//         24.50 => Note::G0,
//         25.96 => Note::G0Sharp,
//         27.50 => Note::A0,
//         29.14 => Note::A0Sharp,
//         30.87 => Note::B0,
//         32.70 => Note::C1,
//         34.65 => Note::C1Sharp,
//         36.71 => Note::D1,
//         38.89 => Note::D1Sharp,
//         41.20 => Note::E1,
//         43.65 => Note::F1,
//         46.25 => Note::F1Sharp,
//         49.00 => Note::G1,
//         51.91 => Note::G1Sharp,
//         55.00 => Note::A1,
//         58.27 => Note::A1Sharp,
//         61.74 => Note::B1,
//         65.41 => Note::C2,
//         69.30 => Note::C2Sharp,
//         73.42 => Note::D2,
//         77.78 => Note::D2Sharp,
//         82.41 => Note::E2,
//         87.31 => Note::F2,
//         92.50 => Note::F2Sharp,
//         98.00 => Note::G2,
//         103.83 => Note::G2Sharp,
//         110.00 => Note::A2,
//         116.54 => Note::A2Sharp,
//         123.47 => Note::B2,
//         130.81 => Note::C3,
//         138.59 => Note::C3Sharp,
//         146.83 => Note::D3,
//         155.56 => Note::D3Sharp,
//         164.81 => Note::E3,
//         174.61 => Note::F3,
//         185.00 => Note::F3Sharp,
//         196.00 => Note::G3,
//         207.65 => Note::G3Sharp,
//         220.00 => Note::A3,
//         233.08 => Note::A3Sharp,
//         246.94 => Note::B3,
//         261.63 => Note::C4,
//         277.18 => Note::C4Sharp,
//         293.66 => Note::D4,
//         311.13 => Note::D4Sharp,
//         329.63 => Note::E4,
//         349.23 => Note::F4,
//         369.99 => Note::F4Sharp,
//         392.00 => Note::G4,
//         415.30 => Note::G4Sharp,
//         440.00 => Note::A4,
//         466.16 => Note::A4Sharp,
//         493.88 => Note::B4,
//         523.25 => Note::C5,
//         554.37 => Note::C5Sharp,
//         587.33 => Note::D5,
//         622.25 => Note::D5Sharp,
//         659.25 => Note::E5,
//         698.46 => Note::F5,
//         739.99 => Note::F5Sharp,
//         783.99 => Note::G5,
//         830.61 => Note::G5Sharp,
//         880.00 => Note::A5,
//         932.33 => Note::A5Sharp,
//         987.77 => Note::B5,
//         1046.50 => Note::C6,
//         _ => Note::C0,
//     }
// }

pub fn note_to_frequency(note: Note) -> f32 {
    FREQUENCIES[note as usize]
}
